<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描组件-->
    <context:component-scan base-package="com.kaede"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver"
          class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--物理视图 = 视图前缀 + 逻辑视图 + 视图后缀，即要跳转的页面-->
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
        配置默认的的servlet处理静态资源
        当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/
        tomcat的web.xml配置的前端控制器DispatcherServlet的url-pattern也是/
        此时，浏览器发送的请求会优先被DispatcherSerlvet处理，但是DispatcherServlet
        无法处理静态资源，若配置了<mvc:default-servlet-handler/>则浏览器发送的所有请求
        都会被DefaultServlet处理，若配置了<mvc:default-servlet-handler/>和
        <mvc:annotation-driven/>，浏览器发送的的请求会先由DispatcherServlet处理，
        如果处理不了，再让DefaultServlet处理
    -->
    <mvc:default-servlet-handler/>

    <!--开启MVC的注解驱动-->
    <mvc:annotation-driven/>

    <!--
        视图控制器：为当前的请求直接设置视图名称实现页面跳转
        若设置视图控制器，则只有视图控制器所设置的请求会被处理，其他的请求将全部404，
        此时必须再配置一个标签<mvc:annotation-driven/>，开启MVC的注解驱动
        有了视图控制器后就不需要写一个控制器方法单独设置请求路径只返回一个视图名称
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--配置文件上传解析器，id必须是multipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>

    <!--配置拦截器-->
    <mvc:interceptors>
        <!--bean标签和ref标签所配置的拦截器默认对DispatcherServlet所处理的所有请求进行拦截-->
        <!--<bean class="com.kaede.interceptor.FirstInterceptor"/>-->
        <ref bean="firstInterceptor"/>
        <ref bean="secondInterceptor"/>

        <!--<mvc:interceptor>
            &lt;!&ndash;
                配置需要拦截的请求的请求路径
                这里的/*比较特殊，只能表示上下文路径下的一层目录的路径，在这里
                用/**表示所有的请求
            &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash;配置需要排除拦截请求的请求路径&ndash;&gt;
            <mvc:exclude-mapping path="/abc"/>
            &lt;!&ndash;配置拦截器&ndash;&gt;
            <bean class="com.kaede.interceptor.FirstInterceptor"/>
        </mvc:interceptor>-->
    </mvc:interceptors>
    <!--
    &lt;!&ndash;配置异常解析器&ndash;&gt;
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                &lt;!&ndash;key设置要处理的异常，value设置出现该异常时要跳转的页面所对应的逻辑视图&ndash;&gt;
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        &lt;!&ndash;设置共享在请求域中的异常信息的属性名&ndash;&gt;
        <property name="exceptionAttribute" value="ex"/>
    </bean>
    -->
</beans>