<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="studentOne" class="com.kaede.spring.pojo.Student"></bean>

    <bean id="studentTwo" class="com.kaede.spring.pojo.Student">
        <!--
            property：通过成员变量的set方法进行赋值
            name：设置需要赋值的属性名（由get()、set()方法定义的，和成员变量无关）
            value：设置为属性所赋的值
        -->
        <property name="stuId" value="1001"></property>
        <property name="stuName" value="张三"></property>
        <property name="stuAge" value="23"></property>
        <property name="stuGender" value="男"></property>
    </bean>

    <bean id="studentThree" class="com.kaede.spring.pojo.Student">
        <constructor-arg name="stuId" value="1002"></constructor-arg>
        <constructor-arg name="stuName" value="李四"></constructor-arg>
        <constructor-arg name="stuGender" value="男"></constructor-arg>
        <constructor-arg name="stuAge" value="24"></constructor-arg>
    </bean>

    <bean id="studentFour" class="com.kaede.spring.pojo.Student">
        <!--
            <：&lt;
            >：&gt;
            CDATA节中的内容会原样解析<![CDATA[...]]>
            CDATA节是XML中一个特殊的标签，因此不能写在一个属性中
        -->
        <property name="stuId" value="1003"></property>
        <!--<property name="stuName" value="&lt;王五&gt;"></property>-->
        <property name="stuName">
            <value><![CDATA[<王五>]]></value>
        </property>
        <property name="stuGender">
            <!--为属性赋值null-->
            <null/>
        </property>
        <property name="stuAge" value="1003"></property>
    </bean>

    <bean id="studentFive" class="com.kaede.spring.pojo.Student">
        <property name="stuId" value="1004"></property>
        <property name="stuName" value="赵六"></property>
        <property name="stuAge" value="26"></property>
        <property name="stuGender" value="男"></property>
        <!--ref：引用IOC容器中的某个bean的id，将该bean所对应的对象为当前的属性赋值-->
        <!--<property name="stuClazz" ref="clazzOne"></property>-->
        
        <!--级联的方式，必须先对stuclazz进行ref赋值，或者在Student类内部先对stuClazz进行实例化-->
        <!--<property name="stuClazz.clazzId" value="2"></property>-->
        <!--<property name="stuClazz.clazzName" value="B班"></property>-->
        
        <property name="stuClazz">
            <!--只能在当前bean的内部使用，不能直接通过IOC容器获取-->
            <bean id="clazzInner" class="com.kaede.spring.pojo.Clazz">
                <property name="clazzId" value="3"></property>
                <property name="clazzName" value="C班"></property>
            </bean>
        </property>
        <!--为数组类型的属性赋值，value/ref-->
        <property name="stuHobbies">
            <array>
                <value>动画</value>
                <value>音乐</value>
                <value>游戏</value>
                <!--<ref bean="xx"/>-->
            </array>
        </property>
        <!--为map类型的属性赋值，也可用ref引用一个map类型的bean-->
        <property name="teacherMap" ref="teacherMap">
            <!--<map>-->
            <!--    <entry key="1" value-ref="teacher1"></entry>-->
            <!--    <entry key="2" value-ref="teacher2"></entry>-->
            <!--</map>-->
        </property>
    </bean>

    <bean id="clazzOne" class="com.kaede.spring.pojo.Clazz">
        <property name="clazzId" value="1"></property>
        <property name="clazzName" value="A班"></property>
    </bean>

    <bean id="clazzTwo" class="com.kaede.spring.pojo.Clazz">
        <property name="clazzId" value="4"></property>
        <property name="clazzName" value="D班"></property>
        <!--为集合类型的属性赋值，也可用ref引用一个list集合类型的bean-->
        <property name="clazzStudents" ref="studentlist">
            <!--<list>-->
            <!--    <ref bean="studentOne"></ref>-->
            <!--    <ref bean="studentThree"></ref>-->
            <!--    <ref bean="studentFive"></ref>-->
            <!--</list>-->
        </property>
    </bean>

    <!--配置一个集合类型的bean，需要使用util约束-->
    <util:list id="studentlist">
        <ref bean="studentOne"></ref>
        <ref bean="studentThree"></ref>
        <ref bean="studentFive"></ref>
    </util:list>

    <bean id="teacher1" class="com.kaede.spring.pojo.Teacher">
        <property name="teaId" value="1"></property>
        <property name="teaName" value="teacherA"></property>
    </bean>

    <bean id="teacher2" class="com.kaede.spring.pojo.Teacher">
        <property name="teaId" value="2"></property>
        <property name="teaName" value="teacherB"></property>
    </bean>

    <util:map id="teacherMap">
            <entry key="1" value-ref="teacher1"></entry>
            <entry key="2" value-ref="teacher2"></entry>
    </util:map>

    <bean id="studentSix" class="com.kaede.spring.pojo.Student"
          p:stuId="1005" p:stuName="小明" p:teacherMap-ref="teacherMap">
    </bean>
</beans>